[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "Simple Visualisation\n\n\n\n\n\n\nML\n\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome\n\n\n\n\n\nWelcome Post\n\n\n\n\n\nFeb 14, 2025\n\n\nNipun Batra\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome.html",
    "href": "posts/welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome\nHello world, this is my first blog post.\nI can write in markdown\nprint(\"Hello World\")\nI can also write math equations:\n\\[\ny = x^2\n\\]\nI can create lists easily:\n\nOne\nTwo\n\nI can also create numbered lists:\n\nOne\nTwo\n\nOr, create a table:\n\n\n\nName\nAge\n\n\n\n\nAlice\n20\n\n\nBob\n21"
  },
  {
    "objectID": "posts/visualisation.html",
    "href": "posts/visualisation.html",
    "title": "Simple Visualisation",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nplt.plot(x, y)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MISSINGNO",
    "section": "",
    "text": "Visualizing Missing Data Patterns Using Missingno in Python"
  },
  {
    "objectID": "index.html#missing-data-visualization",
    "href": "index.html#missing-data-visualization",
    "title": "MISSINGNO",
    "section": "Missing Data Visualization:",
    "text": "Missing Data Visualization:\nMissingno provides various visualization methods, such as bar charts, matrix plots, heatmaps, and dendrograms to efficiently display the distribution of missing data."
  },
  {
    "objectID": "index.html#assessing-data-completeness",
    "href": "index.html#assessing-data-completeness",
    "title": "MISSINGNO",
    "section": "Assessing Data Completeness:",
    "text": "Assessing Data Completeness:\nIdentifies columns with highest missing values instantly, assisting users in making decisions on imputing, dropping, or further investigation."
  },
  {
    "objectID": "index.html#correlation-heatmap",
    "href": "index.html#correlation-heatmap",
    "title": "MISSINGNO",
    "section": "Correlation Heatmap:",
    "text": "Correlation Heatmap:\n1.Displays relationships between missing values across columns. 2.A correlation value of 1 means two variables always have missing data together. 3.A value near -1 indicates one variable is missing while the other is present."
  },
  {
    "objectID": "index.html#matrix-plot-for-pattern-detection",
    "href": "index.html#matrix-plot-for-pattern-detection",
    "title": "MISSINGNO",
    "section": "Matrix Plot for Pattern Detection:",
    "text": "Matrix Plot for Pattern Detection:\nThe matrix plot identifies missing values as white and present values as black and shows clusters or systematic missing values in the data."
  },
  {
    "objectID": "index.html#seamless-pandas-integration",
    "href": "index.html#seamless-pandas-integration",
    "title": "MISSINGNO",
    "section": "Seamless Pandas Integration:",
    "text": "Seamless Pandas Integration:\nMissingno works directly with Pandas DataFrames, making it an easy addition to any data analysis workflow."
  },
  {
    "objectID": "index.html#customization-with-matplotlib-seaborn",
    "href": "index.html#customization-with-matplotlib-seaborn",
    "title": "MISSINGNO",
    "section": "Customization with Matplotlib & Seaborn:",
    "text": "Customization with Matplotlib & Seaborn:\nBuilt on Matplotlib and Seaborn, allowing flexible styling, color customization, and advanced plot adjustments."
  },
  {
    "objectID": "index.html#open-source-actively-maintained",
    "href": "index.html#open-source-actively-maintained",
    "title": "MISSINGNO",
    "section": "Open-Source & Actively Maintained:",
    "text": "Open-Source & Actively Maintained:\nA tool available for free, with continuous updates to maintain compatibility with the latest versions of Python.\nThese are the very important characteristics that make Missingno an essential tool for rapid, efficient, and easily visualizable missing data analysis."
  },
  {
    "objectID": "index.html#unveiling-the-invisible",
    "href": "index.html#unveiling-the-invisible",
    "title": "MISSINGNO",
    "section": "1.Unveiling the Invisible:",
    "text": "1.Unveiling the Invisible:\n\nExample1:\nHelps you to visualize the data the missing data using msno.matrix()\nimport pandas as pd\nimport numpy as np\nimport missingno as msno\nimport matplotlib.pyplot as plt\n\n# Create sample data\ndf = pd.DataFrame({\n    \"A\": [1, np.nan, 3, 4, 5],\n    \"B\": [np.nan, 2, 3, np.nan, 5],\n    \"C\": [1, 2, np.nan, 4, np.nan]\n})\n\n# Matrix visualization\nmsno.matrix(df)\nplt.show()\nOutput\n\n\n\nOutput\n\n\nExplanation:\nThis plot visually represents the presnce of data points with bright white colour and indicates the absence of data with black colour.\n\n\nExample2:\nHere, we will compare the plot’s appearance when specific data points are absent versus how it presents when all data is fully populated. This will provide a clearer understanding of the visual impact that missing information can have on the overall representation of the dataset\n# Original visualization\nmsno.matrix(df)\nplt.title(\"Before Handling Missing Data\")\nplt.show()\n\n# Fill missing values\ndf_filled = df.fillna(df.mean())\n\n# After handling missing data\nmsno.matrix(df_filled)\nplt.title(\"After Filling Missing Data\")\nplt.show()\nOutput\n\n\n\noutput\n\n\n\n\n\noutput\n\n\nExplanation: \nIt Shows how visualizations change when missing data is handled. We are addressing the absence of data by filling in the missing values using the average (mean) for each respective column.\n\n\nExample3:\nNavigating Missing Data Landscapes with Missingno. Generating synthetic missing data and analyzing it.\n# Creating a larger dataset\ndf_large = pd.DataFrame({\n    \"A\": np.random.choice([1, np.nan], size=100, p=[0.9, 0.1]),\n    \"B\": np.random.choice([2, np.nan], size=100, p=[0.8, 0.2]),\n    \"C\": np.random.choice([3, np.nan], size=100, p=[0.85, 0.15])\n})\n\nmsno.matrix(df_large)\nplt.show()\nOutput\n\n\n\noutput\n\n\nExplanation: \nShows how missing values appear in large datasets.\n\n\nExample4:\nAnalyzing missing values in time-series data.\n# Creating time-series data\ndate_rng = pd.date_range(start='1/1/2023', periods=10, freq='D')\ndf_time = pd.DataFrame({\n    \"Date\": date_rng,\n    \"Value\": [np.nan, 2, np.nan, 4, 5, np.nan, 7, np.nan, 9, 10]\n})\n\ndf_time.set_index(\"Date\", inplace=True)\n\n# Matrix visualization with frequency\nmsno.matrix(df_time)\nplt.show()\nOutput\n\n\n\noutput\n\n\nExplanation: \nUseful for analyzing missing data patterns over time.\nAs you observe in the last three code snippets we observe a graph on the right side. This means\n\nHigher peaks → More missing data in those rows. If the line has a sharp peak, that means a specific set of rows has a lot of missing values.\nLower valleys → Fewer missing values in those rows. A dip or flat section in the line means that part of the dataset has fewer or no missing values.\nRepeating peaks → A pattern in missingness. If peaks occur at regular intervals, it suggests systematic missing data (e.g., sensor failures, survey skips, or data collection issues)."
  },
  {
    "objectID": "index.html#bridging-the-gap",
    "href": "index.html#bridging-the-gap",
    "title": "MISSINGNO",
    "section": "2. Bridging the Gap:",
    "text": "2. Bridging the Gap:\nThe function msno.bar() provides a visual representation of missing values in a specific column through an informative bar graph. This tool enables you to quickly assess the extent of missing data, making it easier to identify trends and patterns in your dataset.\nmsno.bar(df)\nplt.show()\nOutput:\n\n\n\nOutput\n\n\nExplanation: \nThis bar chart shows the number of missing values in each column."
  },
  {
    "objectID": "index.html#cracking-the-code-of-missing-values",
    "href": "index.html#cracking-the-code-of-missing-values",
    "title": "MISSINGNO",
    "section": "3.Cracking the Code of Missing Values:",
    "text": "3.Cracking the Code of Missing Values:\nUnraveling the Story with Missingno. Using msno.dendrogram() to find relationships between missing values\nmsno.dendrogram(df)\nplt.show()\n \nOutput:\n\n\n\nOutput\n\n\nExplanation: \nA dendrogram is a diagram that shows how similar objects are related to each other. It’s a tree-like diagram that’s often used to visualize the results of hierarchical clustering.\n\nA and B are linked first, they are more similar in missing value patterns.\nIf C joins later, it means it’s less related to both A and B, but it still shares some relationship between A and B combined. You can consider a and B as a branch and c as another.\n\nSummary:\n\nElements have similar missing patterns and are connected at lower linkage distance.\nThe height of the connection (y-axis value) tells you how different two clusters are.\nLower height → columns are more similar in missing values.\nHigher height → columns are less similar\nColumns with Similar Missingness Are Grouped Together"
  },
  {
    "objectID": "index.html#the-puzzle-of-missing-data",
    "href": "index.html#the-puzzle-of-missing-data",
    "title": "MISSINGNO",
    "section": "4. The Puzzle of Missing Data:",
    "text": "4. The Puzzle of Missing Data:\nThis function msno.heatmap() helps you correlate the missing data with other columns.\nmsno.heatmap(df, cmap=\"coolwarm\")\nplt.show()\nOutput\n\n\n\noutput\n\n\nExplanation: \n\nPerfect positive correlation- Missing values in two columns always occur together.\nPerfect negative correlation-If one column is missing, the other is always present.\nNo correlation-Missingness in one column does not affect the other.\nA lower value means two columns have very similar missingness patterns.\nA higher value means the columns have less similar missingness patterns."
  },
  {
    "objectID": "index.html#visualizing-the-unseen",
    "href": "index.html#visualizing-the-unseen",
    "title": "MISSINGNO",
    "section": "5. Visualizing the Unseen:",
    "text": "5. Visualizing the Unseen:\nIn this analysis, we are integrating three distinct plots into a single comprehensive visual representation. Organizing these elements as subplots allows us to effectively examine and compare the data, highlighting patterns and relationships within a cohesive layout.\nfig, axes = plt.subplots(1, 3, figsize=(15, 5))\n\nmsno.bar(df, ax=axes[0])\naxes[0].set_title(\"Bar Chart\")\n\nmsno.matrix(df, ax=axes[1])\naxes[1].set_title(\"Matrix Chart\")\n\nmsno.heatmap(df, ax=axes[2], cmap=\"coolwarm\")\naxes[2].set_title(\"Heatmap\")\n\nplt.show()\nOutput\n\n\n\noutput\n\n\nExplanation: \nShows how different visualizations complement each other."
  },
  {
    "objectID": "index.html#advantages",
    "href": "index.html#advantages",
    "title": "MISSINGNO",
    "section": "Advantages:",
    "text": "Advantages:\n\nQuick Visualization: Recognizes missing data patterns immediately, which speeds up analysis\nSeamless Integration: Works efficiently with Pandas, a widely used data manipulation library.\n\nInformative Visuals: Provides multiple plots like matrix, bar, heatmap, dendrogram, for an in-depth overview.\n\nSupports Imputation Decisions: Helps in deciding whether to impute, drop, or handle missing values effectively.\n\nData Quality Insights: Identifies correlations of missing values, uncovering possible data integrity problems."
  },
  {
    "objectID": "index.html#disadvantages",
    "href": "index.html#disadvantages",
    "title": "MISSINGNO",
    "section": "Disadvantages:",
    "text": "Disadvantages:\n\nLimited Complexity: Suitable for basic analysis; likely not suitable for large or highly complex datasets.\nLacks Advanced Statistics: Focuses on visualizations rather than detailed statistical analysis.\n\nNot an independent solution: Should be used alongside other Data cleaning strategies for complete analysis.\n\nChallenging for Large Datasets: Visual interpretations may become Unstructured in large datasets.\nBasic Imputation Methods: Requires external libraries for advanced missing data handling techniques like Deep Learning-Based Imputation,Interpolation & Extrapolation."
  },
  {
    "objectID": "index.html#data-cleaning-preprocessing",
    "href": "index.html#data-cleaning-preprocessing",
    "title": "MISSINGNO",
    "section": "1. Data Cleaning & Preprocessing:",
    "text": "1. Data Cleaning & Preprocessing:\nHelps detect and handle missing values before machine learning building models.\n\nExample:\nimport pandas as pd\nimport missingno as msno\nimport numpy as np\n\n# Creating a sample dataset with missing values\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    'Age': [25, np.nan, 30, 22, np.nan],\n    'Salary': [50000, 60000, np.nan, 45000, 70000],\n    'City': ['New York', 'Los Angeles', np.nan, 'Chicago', 'Houston']\n}\n\ndf = pd.DataFrame(data)\n\n# Visualizing missing values\nmsno.matrix(df)   # Shows a matrix plot of missing data\nmsno.bar(df)      # Shows a bar chart with missing data count\nmsno.heatmap(df)  # Shows correlations between missing values\n\n# Handling missing values\ndf_filled = df.fillna(df.median(numeric_only=True))  # Filling numerical NaNs with median\ndf_dropped = df.dropna()  # Dropping rows with missing values\n\n# Display the cleaned data\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nAfter Filling Missing Values:\")\nprint(df_filled)\nprint(\"\\nAfter Dropping Missing Values:\")\nprint(df_dropped)\nOutput"
  },
  {
    "objectID": "index.html#exploratory-data-analysis-eda",
    "href": "index.html#exploratory-data-analysis-eda",
    "title": "MISSINGNO",
    "section": "2. Exploratory Data Analysis (EDA):",
    "text": "2. Exploratory Data Analysis (EDA):\nDetects missing data patterns through visualizations such as bar plots and heatmaps. And also states whether missing data is random or any particular pattern.\n\nExample:\nPratical applications - Embracing the Gaps: Unveiling Missing Data Patterns with Missingno\nUsing missing data as a feature\n'''\ndf[\"Missing_Age\"] = df[\"A\"].isna().astype(int)\ndf[\"Missing_Salary\"] = df[\"B\"].isna().astype(int)\n\nprint(df)\nprint(msno.heatmap(df))\nprint('Explanation: Instead of treating missing data as a problem, we use it as a feature (e.g., flagging missing values).')\nOutput\n\n\n\noutput"
  },
  {
    "objectID": "index.html#detecting-data-collection-problems",
    "href": "index.html#detecting-data-collection-problems",
    "title": "MISSINGNO",
    "section": "3. Detecting Data Collection Problems:",
    "text": "3. Detecting Data Collection Problems:\nIdentifies defects in survey designs, sensor failures, or transmission errors.\n\nExample:\nimport pandas as pd\nimport missingno as msno\nimport numpy as np\n\n# Simulating a dataset with missing values due to data collection issues\ndata = {\n    'Timestamp': pd.date_range(start='2024-01-01', periods=10, freq='D'),\n    'Sensor_1': [10, 15, np.nan, 18, 20, 22, np.nan, 25, 27, np.nan],  # Sensor failures\n    'Sensor_2': [5, np.nan, 8, 9, np.nan, 11, 12, np.nan, 14, 15],      # Transmission errors\n    'Survey_Response': [1, 2, 2, np.nan, 1, 2, np.nan, np.nan, 1, 1]   # Missing survey responses\n}\n\ndf = pd.DataFrame(data)\n\n# Visualizing missing values to detect collection issues\nmsno.matrix(df)   # Identifies gaps due to missing data\nmsno.bar(df)      # Highlights missing value counts\nmsno.heatmap(df)  # Checks correlations between missing values\n\n# Checking missing data percentages\nmissing_percent = df.isnull().mean() * 100\nprint(\"Missing Data Percentage:\")\nprint(missing_percent)\n\n# Checking for patterns in missing data\nprint(\"\\nRows with missing values:\")\nprint(df[df.isnull().any(axis=1)])"
  },
  {
    "objectID": "index.html#feature-engineering-model-tuning",
    "href": "index.html#feature-engineering-model-tuning",
    "title": "MISSINGNO",
    "section": "4. Feature Engineering & Model Tuning:",
    "text": "4. Feature Engineering & Model Tuning:\nAssists in creating improved features and enhancing model accuracy.\nimport pandas as pd\nimport missingno as msno\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Creating a sample dataset with missing values\ndata = {\n    'Feature_1': [10, 20, np.nan, 30, 40, 50, np.nan, 70, 80, 90],\n    'Feature_2': [np.nan, 5, 6, 7, 8, 9, 10, np.nan, 12, 13],\n    'Feature_3': [1, 2, np.nan, 4, 5, 6, 7, 8, np.nan, 10],  # Has missing values\n    'Target': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]  # Binary classification target\n}\n\ndf = pd.DataFrame(data)\n\n# Step 1: Visualizing missing values\nmsno.matrix(df)   # Identifies missing data structure\nmsno.bar(df)      # Shows missing value count\n\n# Step 2: Handling missing values using imputation\nimputer = SimpleImputer(strategy='median')  # Filling missing values with the median\ndf_imputed = pd.DataFrame(imputer.fit_transform(df.drop(columns=['Target'])), columns=['Feature_1', 'Feature_2', 'Feature_3'])\n\n# Step 3: Splitting dataset for model training\nX_train, X_test, y_train, y_test = train_test_split(df_imputed, df['Target'], test_size=0.2, random_state=42)\n\n# Step 4: Training a model before and after handling missing data\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\n# Step 5: Evaluating model accuracy\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Model Accuracy After Handling Missing Values: {accuracy:.2f}\")"
  },
  {
    "objectID": "index.html#medical-financial-data-analysis",
    "href": "index.html#medical-financial-data-analysis",
    "title": "MISSINGNO",
    "section": "5. Medical & Financial Data Analysis:",
    "text": "5. Medical & Financial Data Analysis:\nEvaluates gaps in patient records, financial transactions, and time-series data.\n\nExample:\nUnderstanding Missing Data with Missingno. Demonstrating real-world missing data scenarios.\ndf_real = pd.DataFrame({\n    \"Survey_Responses\": [5, np.nan, 3, 4, np.nan, 2, np.nan, 1, 4, np.nan],\n    \"Medical_Records\": [np.nan, np.nan, 130, 120, np.nan, np.nan, 140, 135, 125, 110]\n})\n\nmsno.matrix(df_real)\nplt.show()\n\n\nprint('Explanation: Represents survey or medical datasets where missing data is common.')\nOutput\n\n\n\noutput\n\n\nExplanation: \nRepresents survey or medical datasets where missing data is common."
  }
]